local function send_apple(self)
	local pos = {x = 0, y = 0}
	pos.x = math.floor(math.random(3, 38))
	pos.y = math.floor(math.random(3, 38))
	for key, val in ipairs(self.segments) do
		if val.x == pos.x and val.y == pos.y then
			pos.y = pos.y + 1
		end
	end
	tilemap.set_tile("#grid", "layer1", pos.x, pos.y, 4)
end

local function restart(self)
	for x = 2, 39 do
		for y = 2, 39 do
			tilemap.set_tile("#grid", "layer1", x, y, 0)
		end
	end

	self.segments = {
		{x = 20, y = 20},
		{x = 21, y = 20},
		{x = 22, y = 20}
	}
	self.dir = {x = 1, y = 0}
	self.speed = 7
	self.t = 0
	self.score = 0
	msg.post("default:/buttons", "set_score", {self.score})
	send_apple(self)
	msg.post("default:/buttons", "hide_restart_button")
	self.live = true
end

function init(self)
	self.segments = {
		{x = 20, y = 20},
		{x = 21, y = 20},
		{x = 22, y = 20}
	}
	self.dir = {x = 1, y = 0}
	self.speed = 7
	self.t = 0
	self.live = true
	math.randomseed(os.time())
	send_apple(self)
	self.score = 0
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
    if self.live then
	    self.t = self.t + dt
	    if self.t >= 1 / self.speed then        
	        local head = self.segments[#self.segments]
	        local newhead = {x = head.x + self.dir.x, y = head.y + self.dir.y}
			
	        if newhead.y == 40 or newhead.y == 1 or newhead.x == 40 or newhead.x == 1 then
	        	self.live = false
	        	msg.post("default:/death", "boom", {x = newhead.x, y = newhead.y})
	        	msg.post("default:/buttons", "show_restart_button")
	        	return
	        end

	        if tilemap.get_tile("#grid", "layer1", newhead.x, newhead.y) == 4 then
	        	sound.play("default:/snake#sound")
	        	table.insert(self.segments, 1, {x = self.segments[#self.segments].x - self.dir.x, y = self.segments[#self.segments].y - self.dir.y})
				send_apple(self)
				self.score = self.score + 1
				self.speed = self.speed + 0.2
				msg.post("default:/buttons", "set_score", {self.score})
	        end
	        
	        table.insert(self.segments, newhead)

	        local tail = table.remove(self.segments, 1)
	        tilemap.set_tile("#grid", "layer1", tail.x, tail.y, 0)


	        for i, s in ipairs(self.segments) do
	            tilemap.set_tile("#grid", "layer1", s.x, s.y, 1)
	        end

	        for key, val in ipairs(self.segments) do
	        	for k, v in ipairs(self.segments) do
	        		if k ~= key and val.x == v.x and val.y == v.y then
						self.live = false
			        	msg.post("default:/death", "boom", {x = newhead.x, y = newhead.y})
						msg.post("default:/buttons", "show_restart_button")
	        			return
	        		end
	        	end
	        end
	        self.t = 0
	    end
	end
end

function fixed_update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	if message_id == hash("set_direction") then
		if message[1] == "up" then
			self.dir.x = 0
        	self.dir.y = 1
        	print("Up")
		elseif message[1] == "down" then
			self.dir.x = 0
        	self.dir.y = -1
        	print("Down!")
		elseif message[1] == "right" then
			self.dir.x = 1
        	self.dir.y = 0
		elseif message[1] == "left" then
			self.dir.x = -1
        	self.dir.y = 0
		elseif message[1] == "restart" then
			restart(self)
		end
	end
end

function on_input(self, action_id, action)
    if action_id == hash("up") and action.pressed then
        self.dir.x = 0
        self.dir.y = 1
    elseif action_id == hash("down") and action.pressed then
        self.dir.x = 0
        self.dir.y = -1
    elseif action_id == hash("left") and action.pressed then
        self.dir.x = -1
        self.dir.y = 0
    elseif action_id == hash("right") and action.pressed then
        self.dir.x = 1
        self.dir.y = 0
    end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
